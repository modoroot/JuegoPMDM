//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/JugadorInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JugadorInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JugadorInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JugadorInputActions"",
    ""maps"": [
        {
            ""name"": ""Jugador"",
            ""id"": ""0ef61657-992e-4d17-9c0c-9508562bb410"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""9450f6ca-9860-43f3-9d56-841a3c3d8382"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interactuar"",
                    ""type"": ""Button"",
                    ""id"": ""93cf56c6-1d0f-486a-bf83-881d4a75f62c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""232f2fe7-5e3b-4e34-bc95-60e4e5330021"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""04eb40ac-2158-4338-94df-256323b889f8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""803e052a-090d-4d05-b380-f4e2870963d9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""12ccb669-eb49-42d0-b15d-a0d1a5f14e93"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1beecc57-fbc3-41df-82f4-ab241f38e68e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Flechas de direccionamiento"",
                    ""id"": ""84dfb4b4-97a9-4a0d-92ef-fd71696bc416"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b31bb09c-241f-4672-9e99-7133bfefe33f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d76afd2f-6b9b-485d-a7ac-709ffc9dfe9b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""171867eb-92b6-466d-ae00-052c4c8712a5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d9f7194f-5f5b-4513-a81f-006a54ea2400"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c2da18a4-8b3b-49af-a48a-f2012da109bd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f2765af-3498-4610-80ab-21f7dadb76df"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe03ee8a-1048-46e7-8017-b4cefce9e86b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Jugador
        m_Jugador = asset.FindActionMap("Jugador", throwIfNotFound: true);
        m_Jugador_Mover = m_Jugador.FindAction("Mover", throwIfNotFound: true);
        m_Jugador_Interactuar = m_Jugador.FindAction("Interactuar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Jugador
    private readonly InputActionMap m_Jugador;
    private List<IJugadorActions> m_JugadorActionsCallbackInterfaces = new List<IJugadorActions>();
    private readonly InputAction m_Jugador_Mover;
    private readonly InputAction m_Jugador_Interactuar;
    public struct JugadorActions
    {
        private @JugadorInputActions m_Wrapper;
        public JugadorActions(@JugadorInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_Jugador_Mover;
        public InputAction @Interactuar => m_Wrapper.m_Jugador_Interactuar;
        public InputActionMap Get() { return m_Wrapper.m_Jugador; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JugadorActions set) { return set.Get(); }
        public void AddCallbacks(IJugadorActions instance)
        {
            if (instance == null || m_Wrapper.m_JugadorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JugadorActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @Interactuar.started += instance.OnInteractuar;
            @Interactuar.performed += instance.OnInteractuar;
            @Interactuar.canceled += instance.OnInteractuar;
        }

        private void UnregisterCallbacks(IJugadorActions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @Interactuar.started -= instance.OnInteractuar;
            @Interactuar.performed -= instance.OnInteractuar;
            @Interactuar.canceled -= instance.OnInteractuar;
        }

        public void RemoveCallbacks(IJugadorActions instance)
        {
            if (m_Wrapper.m_JugadorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJugadorActions instance)
        {
            foreach (var item in m_Wrapper.m_JugadorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JugadorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JugadorActions @Jugador => new JugadorActions(this);
    public interface IJugadorActions
    {
        void OnMover(InputAction.CallbackContext context);
        void OnInteractuar(InputAction.CallbackContext context);
    }
}
